---

- name: PGBouncer | Install PGBouncer package
  ansible.builtin.apt:
    name: "pgbouncer={{ pgbouncer_version }}"
  register: apt_status
  until: apt_status is success
  delay: 5
  retries: 3
  tags: ['pgbouncer']

- name: PGBouncer | Stop and disable standard init script
  ansible.builtin.systemd:
    name: pgbouncer
    state: stopped
    enabled: false
  tags: ['pgbouncer']

- name: PGBouncer | Copy systemd service file
  ansible.builtin.template:
    src: pgbouncer.service.j2
    dest: /etc/systemd/system/pgbouncer.service
    owner: postgres
    group: postgres
    mode: 0644
  notify: restart pgbouncer
  tags: ['pgbouncer']

- name: PGBouncer | Enable log rotation with logrotate
  ansible.builtin.copy:
    src: pgbouncer
    dest: /etc/logrotate.d/pgbouncer
  tags: ['pgbouncer']

- name: PGBouncer | Calculate pool_size
  ansible.builtin.set_fact:
    defined_pool_size: "{{ defined_pool_size|default(0)|int + item.pool_parameters|regex_search('pool_size=(\\d+)')|regex_replace('[^0-9]', '')|default(pgbouncer_default_pool_size, true)|int }}"
  loop: "{{ pgbouncer_pools }}"
  tags: ['pgbouncer']

- name: PGBouncer | Calculate total_pool_size
  ansible.builtin.set_fact:
    total_pool_size: "{{ defined_pool_size|default(0)|int + (postgresql_databases|length|int - pgbouncer_pools|length|int) * pgbouncer_default_pool_size|int }}"
  tags: ['pgbouncer']

- name: PGBouncer | Set default value to max_connections
  ansible.builtin.set_fact:
    max_connections: 100
  tags: ['pgbouncer']

- name: PGBouncer | Set max_connections from vars if it defined
  ansible.builtin.set_fact:
    max_connections: "{{ item.value|default(100, true) }}"
  when: item.option == "max_connections"
  loop: "{{ postgresql_parameters }}"
  tags: ['pgbouncer']

- name: PGBouncer | Failed when total_pool_size > max_connections
  ansible.builtin.fail:
    msg: "total_pool_size: {{ total_pool_size  }} > max_connections: {{ max_connections }}. Need change settings"
  when: pgbouncer_pools is defined and pgbouncer_pools | length > 0 and total_pool_size | int > max_connections | int
  tags: ['pgbouncer']

- name: PGBouncer | Configure pgbouncer.ini
  ansible.builtin.template:
    src: templates/pgbouncer.ini.j2
    dest: "{{ pgbouncer_conf_dir }}/pgbouncer.ini"
    owner: postgres
    group: postgres
    mode: 0640
  notify: restart pgbouncer
  when: existing_pgcluster is not defined or not existing_pgcluster|bool
  tags: ['pgbouncer']

- name: PGBouncer | Create userlist.txt
  ansible.builtin.template:
    src: templates/userlist.txt.j2
    dest: "{{ pgbouncer_conf_dir }}/userlist.txt"
    owner: postgres
    group: postgres
    mode: 0640
  when: existing_pgcluster is not defined or not existing_pgcluster|bool
  tags: ['pgbouncer']

- name: PGBouncer | Add only an PG node | add_balancers.yml
  block:
    - name: PGBouncer | Fetch pgbouncer.ini and userlist.txt conf files from master
      run_once: true
      ansible.builtin.fetch:
        src: "{{ item }}"
        dest: files/
        validate_checksum: true
        flat: true
      loop:
        - /etc/pgbouncer/pgbouncer.ini
        - /etc/pgbouncer/userlist.txt
      when: is_master is defined and is_master|bool

    - name: PGBouncer | Copy pgbouncer.ini and userlist.txt conf files to replica
      ansible.builtin.copy:
        src: "files/{{ item }}"
        dest: /etc/pgbouncer/
        owner: postgres
        group: postgres
        mode: 0640
      loop:
        - pgbouncer.ini
        - userlist.txt

    - name: PGBouncer | Remove pgbouncer.ini and userlist.txt conf files from localhost
      run_once: true
      ansible.builtin.file:
        path: "files/{{ item }}"
        state: absent
      loop:
        - pgbouncer.ini
        - userlist.txt
      delegate_to: localhost

    - name: PGBouncer | Prepare pgbouncer.ini conf file (replace "listen_addr")
      ansible.builtin.lineinfile:
        path: /etc/pgbouncer/pgbouncer.ini
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        backrefs: true
      loop:
        - { regexp: '^listen_addr =', line: 'listen_addr = {{ hostvars[inventory_hostname].inventory_hostname }}' }
      loop_control:
        label: "{{ item.line }}"
      notify: restart pgbouncer
      when: with_haproxy_load_balancing|bool or
            (cluster_vip is not defined or cluster_vip | length < 1)

    - name: PGBouncer | Prepare pgbouncer.ini conf file (replace "listen_addr")
      ansible.builtin.lineinfile:
        path: /etc/pgbouncer/pgbouncer.ini
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        backrefs: true
      loop:
        - { regexp: '^listen_addr =', line: 'listen_addr = {{ hostvars[inventory_hostname].inventory_hostname }},{{ cluster_vip }}' }
      loop_control:
        label: "{{ item.line }}"
      notify: restart pgbouncer
      when: not with_haproxy_load_balancing|bool and (cluster_vip is defined and cluster_vip | length > 0 )
  when: existing_pgcluster is defined and existing_pgcluster|bool
  tags: ['pgbouncer']

- meta: flush_handlers
