---

- name: PostgreSQL | create statistics directory (if not already exists)
  ansible.builtin.file:
    path: "{{ postgresql_stats_temp_directory_path }}"
    state: directory
    owner: postgres
    group: postgres
    mode: 01777
  when:
    - postgresql_stats_temp_directory_path is defined
    - postgresql_stats_temp_directory_path != 'none'
    - postgresql_version is version('14', '<=')
  tags: ['patroni']

- name: PostgreSQL | mount the statistics directory in memory (tmpfs)
  ansible.builtin.mount:
    path: "{{ postgresql_stats_temp_directory_path }}"
    src: tmpfs
    fstype: tmpfs
    opts: "size={{ postgresql_stats_temp_directory_size }},uid=postgres,gid=postgres"
    state: mounted
  when:
    - postgresql_stats_temp_directory_path is defined
    - postgresql_stats_temp_directory_path != 'none'
    - postgresql_version is version('14', '<=')
  tags: ['patroni']

- name: PostgreSQL | make sure the custom WAL directory "{{ postgresql_wal_dir }}" exists
  ansible.builtin.file:
    path: "{{ postgresql_wal_dir }}"
    state: directory
    owner: postgres
    group: postgres
    mode: 0700
  when: postgresql_wal_dir is defined and postgresql_wal_dir | length > 0
  tags: ['patroni']

- name: PostgreSQL | When PostgreSQL does not exist
  block:
    - name: PostgreSQL | check that data directory "{{ postgresql_data_dir }}" is not initialized
      ansible.builtin.stat:
        path: "{{ postgresql_data_dir }}/PG_VERSION"
      register: pgdata_initialized
      when: patroni_cluster_bootstrap_method == "initdb"

    - name: PostgreSQL | data directory check result
      ansible.builtin.fail:
        msg: "Whoops! data directory {{ postgresql_data_dir }} is already initialized"
      when: pgdata_initialized.stat.exists is defined and
            pgdata_initialized.stat.exists

    - name: PostgreSQL | make sure the postgresql config files exists
      ansible.builtin.stat:
        path: "{{ postgresql_conf_dir }}/postgresql.conf"
      register: postgresql_conf_file

    - name: PostgreSQL | generate default postgresql config files
      become: true
      become_user: postgres
      ansible.builtin.command: >
        /usr/bin/pg_createcluster {{ postgresql_version }} {{ postgresql_cluster_name }}
        -d {{ postgresql_data_dir }}
        -p {{ postgresql_port }}
        -e {{ postgresql_encoding }}
        --locale {{ postgresql_locale }}
      register: pg_createcluster_result
      failed_when: pg_createcluster_result.rc != 0
      when: not postgresql_conf_file.stat.exists

    - name: PostgreSQL | make sure the data directory "{{ postgresql_data_dir }}" is empty
      ansible.builtin.file:
        path: "{{ postgresql_data_dir }}"
        state: "{{ item }}"
        owner: postgres
        group: postgres
        mode: 0700
      loop:
        - absent
        - directory

    - name: PostgreSQL | make sure the custom WAL directory "{{ postgresql_wal_dir }}" is empty
      ansible.builtin.file:
        path: "{{ postgresql_wal_dir }}"
        state: "{{ item }}"
        owner: postgres
        group: postgres
        mode: 0700
      loop:
        - absent
        - directory
      when: (postgresql_wal_dir is defined and postgresql_wal_dir | length > 0) and
            (is_master is defined and is_master|bool)
  when: postgresql_exists != "true" or patroni_cluster_bootstrap_method != "initdb"
  tags: ['patroni']

- name: PostgreSQL | When PostgreSQL does exist
  block:
    - name: PostgreSQL | check that data directory "{{ postgresql_data_dir }}" is initialized
      ansible.builtin.stat:
        path: "{{ postgresql_data_dir }}/PG_VERSION"
      register: pgdata_initialized

    - name: PostgreSQL | data directory check result
      ansible.builtin.fail:
        msg: "Whoops! data directory {{ postgresql_data_dir }} is not initialized"
      when: not pgdata_initialized.stat.exists

    - name: PostgreSQL | Check PostgreSQL on master
      block:
        - name: PostgreSQL | check PostgreSQL is started on Master
          become: true
          become_user: postgres
          ansible.builtin.command: "{{ postgresql_bin_dir }}/pg_ctl status -D {{ postgresql_data_dir }}"
          register: pg_ctl_status_result
          changed_when: false
          failed_when:
            - pg_ctl_status_result.rc != 0
            - pg_ctl_status_result.rc != 3

        - name: PostgreSQL | start PostgreSQL on Master
          become: true
          become_user: postgres
          ansible.builtin.command: "/usr/bin/pg_ctlcluster {{ postgresql_version }} {{ postgresql_cluster_name }} start"
          register: pg_start_on_master
          when: pg_ctl_status_result.rc == 3 and
                postgresql_packages|join(" ") is not search("postgrespro")

        - name: PostgreSQL | check PostgreSQL is accepting connections
          become: true
          become_user: postgres
          ansible.builtin.command: "{{ postgresql_bin_dir }}/pg_isready -p {{ postgresql_port }}"
          register: pg_isready_result
          until: pg_isready_result.rc == 0
          retries: 30
          delay: 10
          changed_when: false

        - name: PostgreSQL | generate pg_hba.conf on Master
          ansible.builtin.template:
            src: pg_hba.conf.j2
            dest: "{{ postgresql_conf_dir }}/pg_hba.conf"
            owner: postgres
            group: postgres
            mode: 0640

        - name: PostgreSQL | reload for apply the pg_hba.conf
          become: true
          become_user: postgres
          ansible.builtin.command: "{{ postgresql_bin_dir }}/psql -p {{ postgresql_port }} -c 'SELECT pg_reload_conf()'"
          register: psql_reload_result
          failed_when: psql_reload_result.rc != 0

        - name: PostgreSQL | make sure users are present, and password does not differ from the specified
          become: true
          become_user: postgres
          ansible.builtin.postgresql_user:
            db: postgres
            name: "{{ item.name }}"
            password: "{{ item.password }}"
            encrypted: true
            role_attr_flags: "{{ item.role_attr_flags }}"
            login_unix_socket: "{{ postgresql_unix_socket_dir }}"
            port: "{{ postgresql_port }}"
            state: present
          with_items:
            - { name: "{{ patroni_superuser_username }}", password: "{{ patroni_superuser_password }}", role_attr_flags: "SUPERUSER" }
            - { name: "{{ patroni_replication_username }}", password: "{{ patroni_replication_password }}", role_attr_flags: "LOGIN,REPLICATION" }
      when: is_master is defined and is_master|bool

    - name: PostgreSQL | check PostgreSQL is started
      become: true
      become_user: postgres
      ansible.builtin.command: "{{ postgresql_bin_dir }}/pg_ctl status -D {{ postgresql_data_dir }}"
      register: pg_ctl_status_result
      changed_when: false
      failed_when:
        - pg_ctl_status_result.rc != 0
        - pg_ctl_status_result.rc != 3

    - name: PostgreSQL | waiting for CHECKPOINT to complete before stopping postgresql
      become: true
      become_user: postgres
      ansible.builtin.command: "{{ postgresql_bin_dir }}/psql -p {{ postgresql_port }} -c 'CHECKPOINT'"
      register: checkpoint_result
      until: checkpoint_result.rc == 0
      retries: 300
      delay: 10
      when: pg_ctl_status_result.rc == 0

    - name: PostgreSQL | Stop PostgreSQL (will be managed by patroni)
      become: true
      become_user: postgres
      ansible.builtin.command: "/usr/bin/pg_ctlcluster {{ postgresql_version }} {{ postgresql_cluster_name }} stop -m fast -- -w -t 600"
      when: checkpoint_result.rc is defined and checkpoint_result.rc == 0

    - name: PostgreSQL | check PostgreSQL is stopped
      become: true
      become_user: postgres
      ansible.builtin.command: "{{ postgresql_bin_dir }}/pg_ctl status -D {{ postgresql_data_dir }}"
      register: pg_ctl_stop_result
      failed_when: pg_ctl_stop_result.rc != 3
      changed_when: false
  when: postgresql_exists == "true" and patroni_cluster_bootstrap_method == "initdb"
  tags: ['patroni']
